package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/websocket"
)

const (
	// Time allowed to write a message to the peer.
	writeWait = 10 * time.Second

	// Time allowed to read the next pong message from the peer.
	pongWait = 60 * time.Second

	// Send pings to peer with this period. Must be less than pongWait.
	pingPeriod = (pongWait * 9) / 10

	// Maximum message size allowed from peer.
	maxMessageSize = 512
)

var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
}

// connection is an middleman between the websocket connection and the hub.
type connection struct {
	// The websocket connection.
	ws *websocket.Conn

	// Buffered channel of outbound messages.
	send chan []byte
}

// readPump pumps messages from the websocket connection to the hub.
func (s subscription) readPump() {
	c := s.conn
	defer func() {
		h.unregister <- s
		c.ws.Close()
	}()
	c.ws.SetReadLimit(maxMessageSize)
	c.ws.SetReadDeadline(time.Now().Add(pongWait))
	c.ws.SetPongHandler(func(string) error { c.ws.SetReadDeadline(time.Now().Add(pongWait)); return nil })
	for {
		_, msg, err := c.ws.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway) {
				log.Printf("error: %v", err)
			}
			break
		}
		m := message{msg, s.room}

		//fmt.Print(string(msg))
		/*if listStroke != nil {
			// envoie au front end
			//data []byte
			// room string
			dataStroke:=message{listStroke,s.room}
			h.broadcast <- dataStroke
		}*/
		h.broadcast <- m
	}
}

func Find(slice []string, val string) (int, bool) {
	for i, item := range slice {
		if item == val {
			return i, true
		}
	}
	return -1, false
}

var birdData map[string]interface{}
var birdDataTwo map[string]interface{}
var data map[string]interface{}
var lesSalons []string
var salonExist int

var nameSalon string = ""   // variable declaré
var pointerNomSalon *string /* pointer variable declaration */
var NameRoom string

//var replaceNameRoomAdmin string
var nameRoomForUsers string
var dessin string
var chat string
var adminDrawer string
var etape string

var NamePlayer string

var pointeurDonnes *map[string]interface{}

var donnes map[string]interface{}

type Personnage struct {
	nom        string
	vie        int
	puissance  int
	mort       bool
	inventaire [3]string
}

type InformationRoom struct {
	nomSalon /*string*/ map[string]int
	// strokes        string
	// etape_courante string
	// users []string
	// chats string
}

/*type AllRoom struct {
    rooms []string
}*/

type AllRoom struct {
	rooms []map[string]string //InformationRoom
}

type testData struct {
	data map[string]interface{}
}

/*donnes= map[string]interface{}{
	"salon1": map[string]string{
		"strokes": "[{x: 39, y: 49}, {x:59, y:488}]",
		"etape_courante": "etape_0",
		"david":"{admin: true, drawer: false}",
		"sam":"{admin: false, drawer: true}",
		"tim":"{admin: false, drawer: false}",
		"chat" :"{}",
	},
}*/

var p1 Personnage
var data1 testData
var InformationRoom1 InformationRoom
var AllRoom1 AllRoom

func (p *Personnage) Init(nom string, vie int, puissance int, mort bool, inventaire [3]string) {
	p.nom = nom
	p.vie = vie
	p.puissance = puissance
	p.mort = mort
	p.inventaire = inventaire
}

// func (d *testData) dataInit(nameRoomForUsers string, NamePlayer string) {
// 	items := make([]map[string]string, 0)
// 	item := make(map[string]string)
// 	item["strokes"] = "[]"
// 	item["etape_courante"] = "etape_0"
// 	item[NamePlayer] = "{admin: true, drawer: false}"
// 	item["chat"] = ""
// 	items = append(items, item)
//     d.data[nameRoomForUsers]=items

// }

func (i *InformationRoom) dataInit(nomSalon map[string]string, inventaire []string) {
	//i.nomSalon=nomSalon
	//i.strokes= "[]"
	//i.etape_courante= "etape_0"
	//i.users= inventaire
	//i.chats=""
}

/*func (a *AllRoom) AllRoomInit(NamePlayer string,inventaire []string) {
    a.rooms= inventaire
}*/

func (p Personnage) affichage() {
	fmt.Println("--------------------------------------------------")
	fmt.Println("Vie du personnage", p.nom, ":", p.vie)
	fmt.Println("Puissance du personnage", p.nom, ":", p.puissance)

	if p.mort {
		fmt.Println("Vie du personnage", p.nom, "est mort")
	} else {
		fmt.Println("Vie du personnage", p.nom, "est vivant")
	}

	fmt.Println("\nLe personnage", p.nom, "possède dans son inventaire :", p.vie)

	for _, item := range p.inventaire {
		fmt.Println("-", item)
	}
}

// func (d testData) DataAffichage() {
//     fmt.Println("--------------------------------------------------")
//     fmt.Println("data", d.data)

// }

func (i InformationRoom) InfoAffichage() {
	fmt.Println("--------------------------------------------------")
	fmt.Println("nom salon", i.nomSalon)
	//fmt.Println("strokes", i.strokes)
	//fmt.Println("etape_courante", i.etape_courante)
	//fmt.Println("users", i.users)
	//fmt.Println("chats", i.chats)
}

func (a AllRoom) AllRoomAffichage() {
	fmt.Println("--------------------------------------------------")
	fmt.Println("rooms", a.rooms)
	// for v, item := range a.rooms  {
	// 	fmt.Println("chaque v", v)
	// 	fmt.Println("chaque item", item)
	// }

}

// write writes a message with the given message type and payload.
func (c *connection) write(mt int, payload []byte) error {
	c.ws.SetWriteDeadline(time.Now().Add(writeWait))

	//fmt.Println("\n  payload",string(payload))
	//fmt.Println(" valeur avant pointeurDonnes", pointeurDonnes)
	alldata := string(payload)
	alldata = strings.ReplaceAll(alldata, "{", "")
	alldata = strings.ReplaceAll(alldata, "}", "")
	//fmt.Println("alldata ",alldata)

	listAllData := strings.Split(alldata, ",")
	//fmt.Println("tableau",listAllData) // {"nouveau_joueur":"erezr"

	birdData := make(map[string]interface{})
	items := make([]map[string]string, 0)
	item := make(map[string]string)

	fmt.Println("\n avant")
	//p1.affichage()
	//InformationRoom1.InfoAffichage()
	AllRoom1.AllRoomAffichage()

	pointerNomSalon = &nameSalon

	for _, v := range listAllData {
		if strings.Contains(v, "room") {
			NameRoom = strings.ReplaceAll(v, "\"room\":", "")
			//var test=&nomSalon
			//fmt.Printf("\nNameRoom: %s",NameRoom )
			//fmt.Printf("\nValue of Pointer variable: %s",*pointerNomSalon )
			if strings.Contains(*pointerNomSalon, NameRoom) {
				fmt.Println("\n existe")
				salonExist = 1
				nameRoomForUsers = NameRoom
			} else {
				fmt.Println("\nexiste pas")
				salonExist = 0
				//fmt.Printf("\ancienne valeur: %s",nomSalon )
				nameSalon = strings.TrimSuffix(nameSalon, "}") // enleve le dernier caractere "}"
				//nomSalon+=NameRoom+"{admin:,users:,coordonnes:,chat:},}"

				nameSalon += NameRoom + ","
				//{"qqqq-1653331278116"},"xxxxx-1653331274757"},"rtret-1653331270024"},}

				nameRoomForUsers = NameRoom
				// ici NameRoom sera une addition de tout les salles
				NameRoom = nameSalon
				pointerNomSalon = &NameRoom // mega attention ici

				//fmt.Printf("\nValue of Actual Variable: %s",nomSalon ) // australia
				//fmt.Printf("\n All rooms: %s",*pointerNomSalon ) // australia
				//ajouterRoom(&nomSalon,NameRoom)

			}
		}
		if strings.Contains(v, "nouveau_joueur") && salonExist == 1 {
			NamePlayer = strings.ReplaceAll(v, "\"nouveau_joueur\":", "")
		}

		// cree les informations de la nouvelle room  avec le nouveu joueur
		if strings.Contains(v, "nouveau_joueur") && salonExist == 0 {
			fmt.Println("\n nouveau joueur")
			NamePlayer = strings.ReplaceAll(v, "\"nouveau_joueur\":", "")
			//fmt.Println(" nouveau_joueur =>",NamePlayer)

			/*	"salon1": map[string]string{
					"strokes": [{x: 39, y: 49}, {x:59, y:488}...],
					"etape_courante": "etape_0",
					"david":{admin: true, drawer: false},
					"sam":{admin: false, drawer: true},
					"tim":{admin: false, drawer: false},
					"chat" :{},
				}
			*/

			//dessin="\"strokes\": [{x: 39, y: 49}, {x:59, y:488}...]," example parfait
			//chat="\"chat\":{david: sltsam: slt},"  example parfait
			//adminDrawer=":{admin: true, drawer: false}," example parfait

			//p1.Init(nameRoomForUsers, 100, 40, false, [3]string{NamePlayer, "poisons", "bâton"})
			//data1.DataInit(nameRoomForUsers,NamePlayer)

			if len(AllRoom1.rooms) == 0 {
				fmt.Println("\n si allroom est vide alors on rajoute un salon avec les informations")
				//InformationRoom1.dataInit(/*NamePlayer,*/nameRoomForUsers,[]string{NamePlayer+":{admin: true, drawer: false},"})
				var futurRoom = make(map[string]interface{})
				var attributRoom = make(map[string]interface{})
				//futurRoom["nomSalon"] = nameRoomForUsers
				attributRoom["chats"] = ""
				attributRoom["strokes"] = ""
				attributRoom["etape_courante"] = "etape_0"
				attributRoom[NamePlayer] = "{admin: true, drawer: false},"
				futurRoom[nameRoomForUsers] = attributRoom

				var notes = make(map[string]string)
				notes[nameRoomForUsers] = nameRoomForUsers // ok
				notes["strokes"] = ""                      // ok
				notes["etape_courante"] = "etape_0"
				notes["mot"] = ""
				notes[NamePlayer] = "{admin: true, drawer: false, score : 0}"
				notes["chats"] = "" // ok
				// var notes2 = make(map[string]string)
				// notes2["Hatimz"] = "a"
				// notes2["Alexz"] = "a"
				// notes2["Kevinzzzzz"] = "a"
				// notes2 === AllRoom1.rooms[1] cest lindex 1 alors que le truc au dessus  notes cest lindex 0
				AllRoom1 = AllRoom{
					rooms: []map[string]string{

						/*futurRoom*/ /*nameRoomForUsers*/ notes,
						//notes2, // ajouter a l index 1 cette notes2

					},
				}
				// AllRoom1=AllRoom{
				// 	rooms:[]InformationRoom{
				// 	InformationRoom{
				// 			nomSalon:/*futurRoom*//*nameRoomForUsers*/notes,
				// 			/*strokes:  "[]",
				// 			etape_courante: "etape_0",
				// 			users: []string{NamePlayer+":{admin: true, drawer: false},"},
				// 			chats: "",*/
				// 		},
				// 	},
				// }
			} else {
				fmt.Println("\n ça veut dire que allroom n est pas vide , on va ajouter un salon de plus avec ses informations")
				//oldData:=InformationRoom1
				//InformationRoom1.dataInit(nameRoomForUsers,[]string{NamePlayer+":{admin: true, drawer: false},"})
				var futurRoom = make(map[string]interface{})
				var attributRoom = make(map[string]interface{})
				//futurRoom["nomSalon"] = nameRoomForUsers
				attributRoom["chats"] = ""
				attributRoom["strokes"] = ""
				attributRoom["etape_courante"] = "etape_0"
				attributRoom[NamePlayer] = "{admin: true, drawer: false},"
				futurRoom[nameRoomForUsers] = attributRoom

				var notes = make(map[string]string)
				notes[nameRoomForUsers] = nameRoomForUsers
				notes["strokes"] = ""
				notes["etape_courante"] = "etape_0"
				notes[NamePlayer] = "{admin: true, drawer: false, score : 0}"
				notes["chats"] = ""
				notes["mot"] = ""
				AllRoom1.rooms = append(AllRoom1.rooms,

					/*futurRoom*/ /*nameRoomForUsers*/
					notes,
				)
				// AllRoom1.rooms=append(AllRoom1.rooms,/*InformationRoom1*/InformationRoom{
				// 	nomSalon: /*futurRoom*//*nameRoomForUsers*/notes,
				// 	/*strokes:  "[]",
				// 	etape_courante: "etape_0",
				// 	users: []string{NamePlayer+":{admin: true, drawer: false},"},
				// 	chats: "",*/
				// },)
				//AllRoom1.rooms=append(AllRoom1.rooms,InformationRoom1)
				/*AllRoom1=AllRoom{
					rooms:[]InformationRoom{
						oldData,
						InformationRoom1,
					},
				}*/
			}
			//AllRoom1.AllRoomInit(NamePlayer,[]string{InformationRoom1})

			fmt.Println("\n apres")
			//InformationRoom1.InfoAffichage()
			fmt.Println("\n allroom ", AllRoom1)
			//p1.affichage()

			//AllRoom1.AllRoomAffichage()

			donnes = map[string]interface{}{
				/*"salon1": map[string]string{
					"strokes": "[{x: 39, y: 49}, {x:59, y:488}]",
					"etape_courante": "etape_0",
					"david":"{admin: true, drawer: false}",
					"sam":"{admin: false, drawer: true}",
					"tim":"{admin: false, drawer: false}",
					"chat" :"{}",
				},*/
			}
			//fmt.Println("\n null?", donnes)

			/*if (len(donnes) == 0) {
				fmt.Println("\n vide")
			}*/

			//fmt.Println("\n allroom ",AllRoom1.rooms)

			item["strokes"] = "[]"
			item["etape_courante"] = "etape_0"
			item[NamePlayer] = "{admin: true, drawer: false}"
			item["chat"] = ""
			items = append(items, item)
			donnes[nameRoomForUsers] = items
			//fmt.Println("donnes", donnes)
			pointeurDonnes = &donnes
			//fmt.Println("\n futur pointeurDonnes", *pointeurDonnes)

			// json.Unmarshal([]byte(payloads), &user)
			// fmt.Printf("Species: %s, Description: %s", user.Nouveau_joueur, user.Room)

			item["users"] = NamePlayer
			item["admin"] = NamePlayer
			item["coordonnes"] = ""
			item["chat"] = ""
			items = append(items, item)
			birdData[NameRoom] = items

			//fmt.Println("birdData premier technique",birdData)
			//data, _ := json.Marshal(birdData)
			//return c.ws.WriteMessage(mt, data)
			//fmt.Println(string(data))
		}

		// ajoute le nouveau message dans le salon existant
		if salonExist == 1 && strings.Contains(v, "chat") {
			//fmt.Println("tableau",listAllData)
			//"chat":"david: lu"
			//nameRoomForUsers
			chat = strings.ReplaceAll(v, "\"chat\":", "")
			fmt.Printf("\n  le nouveau message")
			//fmt.Println("\n  donnée",AllRoom1 )

			// cherche l'index ou se trouve la salle dans Allroom1
			var indexAllroom int
			for i, item := range AllRoom1.rooms {
				//fmt.Println("index ", v)

				//if ( strings.Contains(item, nameRoomForUsers)){
				//fmt.Println("chaque item", item)
				//fmt.Println("\nitem "+nameRoomForUsers+" :", item[nameRoomForUsers])
				//}
				if item[nameRoomForUsers] == nameRoomForUsers {
					//fmt.Println("nameRoomForUsers ", nameRoomForUsers)
					//fmt.Println("index ", i)
					indexAllroom = i
					// ensuite allons sur allRoom1.rooms[indexAllroom]["chats"]
					//fmt.Println("\n avant chat ", AllRoom1.rooms[indexAllroom]["chats"])
					if strings.Contains(AllRoom1.rooms[indexAllroom]["chats"], chat+"\n") {
						// pour eviter quil ecrit deux fois le nouveau message chat
					} else {
						AllRoom1.rooms[indexAllroom]["chats"] = AllRoom1.rooms[indexAllroom]["chats"] + chat + "\n"
					}

					//fmt.Println("\n apres chat ", AllRoom1.rooms[indexAllroom]["chats"])

				}

			}

			// for i, item := range AllRoom1.rooms[indexAllroom]  {

			// 	if ( i=="chats"){
			// 		fmt.Println("chaque i", i)
			// 		fmt.Println("chaque item", item)
			// 	}

			// }

			//fmt.Println("\n  test 0 le tableau devient une zone accolade",AllRoom1.rooms[0] )
			/*for v, item := range AllRoom1.rooms[0]  {
				fmt.Println("chaque v", v)
				fmt.Println("chaque item", item)
			}*/

			//nameRoomForUsers

			//fmt.Printf("\n room?: %s",chat )
			//fmt.Printf("\n room?: %s",nameRoomForUsers )

			//nameRoomForUsers
			//dataUsers, _ := json.Marshal(*pointerNomUsers )
			//fmt.Printf("\n information de cette clef?: %s",dataUsers )

			//salons := donnes["salon1"].(map[string]string)
			//salons["users"] = "MONSALONHEY"

		}

	}

	// delete user
	//{"salon-1":"salon-1","quit":"sam"}
	if strings.Contains(string(payload), "quit") {
		deleteSalon := 1
		byt := []byte(string(payload))
		var dat map[string]interface{}
		if err := json.Unmarshal(byt, &dat); err != nil {
			panic(err)
		}
		fmt.Println(dat)
		deleteUser := dat["quit"].(string)
		fmt.Println("\ndeleteuser", deleteUser)
		for i, item := range AllRoom1.rooms {
			//fmt.Println("\ni",i)
			//fmt.Println("\n item ",item)
			if item[nameRoomForUsers] == nameRoomForUsers {

				//fmt.Println(" fait voir",AllRoom1.rooms[i])
				delete(AllRoom1.rooms[i], "\""+deleteUser+"\"")
				//fmt.Println("\n fait voir apres delete user",AllRoom1.rooms[i])

				for _, value := range AllRoom1.rooms[i] {
					if strings.Contains(value, "admin") {
						deleteSalon = 0
					}
				}
				// alors delete salon car il n y a pas plus de user
				if deleteSalon == 1 {
					AllRoom1.rooms = append(AllRoom1.rooms[:i], AllRoom1.rooms[(i+1):]...)
					//delete(AllRoom1,AllRoom1.rooms[i])
					// marche pas???????
					fmt.Println("\n apres delete room", AllRoom1.rooms)
				}
			}

		}
	}

	//changement etape
	if strings.Contains(string(payload), "changement_etape") && salonExist == 1 {
		// alors cest un stroke
		//fmt.Println("contenu du message chagement_etape",string(payload))
		//{"changement_etape":"etape_2","mot":"outgasses"}
		/*var etapeSuivant EtapeSuivante
		json.Unmarshal([]byte(payload), &etapeSuivant)

		fmt.Println(string(etapeSuivant.ChangementEtape))*/

		byt := []byte(string(payload))
		var dat map[string]interface{}
		if err := json.Unmarshal(byt, &dat); err != nil {
			panic(err)
		}
		//fmt.Println(dat)

		changEtape := dat["changement_etape"].(string)
		fmt.Println(" valeur de changement_etape  ", changEtape)

		mot:= fmt.Sprintf("%v", dat["mot"])

		// if test == "true" || test == "false" {
		//     fmt.Println("le type de dat mot est ", dat["mot"].(bool))
		// } else {
		//     fmt.Println("le type de dat mot est ", dat["mot"].(string))
		// }

		//if ( changEtape=="etape_1") {
		//mot:= dat["mot"].(bool)
		//}else if ( changEtape=="etape_2") {
		//	mot:= dat["mot"].(string)
		//}

		//fmt.Println(" valeur de mot  ",mot)
		//{"kind":4,"points":[{"x":187,"y":77}]}
		//points:= strings.ReplaceAll(v, "\"points\":", "")

		//fmt.Println("\n     allrooms  ça value : ",AllRoom1/*.rooms*/ )
		for i, item := range AllRoom1.rooms {
			fmt.Println("\ni", i)
			fmt.Println("\n item ", item)
			if item[nameRoomForUsers] == nameRoomForUsers {

				fmt.Println(" fait voir", AllRoom1.rooms[i])
				if AllRoom1.rooms[i]["etape_courante"] == changEtape {
					// sinon ça ecrite deux fois
				} else {
					AllRoom1.rooms[i]["etape_courante"] = changEtape
					AllRoom1.rooms[i]["mot"] = mot
				}
				fmt.Println("\n fait voir apres", AllRoom1.rooms[i])
			}
		}
		//var newUser = make(map[string]string)
		//newUser[NamePlayer] = "{admin: false, drawer: false}"

	}

	// nouveau user add dans un salon
	if strings.Contains(string(payload), "nouveau_joueur") && salonExist == 1 {
		// alors cest un stroke
		//fmt.Println(string(payload))
		//{"kind":4,"points":[{"x":187,"y":77}]}
		//points:= strings.ReplaceAll(v, "\"points\":", "")
		var indexAllroom int
		for i, item := range AllRoom1.rooms {
			if item[nameRoomForUsers] == nameRoomForUsers {
				indexAllroom = i
			}
		}
		var newUser = make(map[string]string)
		newUser[NamePlayer] = "{admin: false, drawer: false}"
		//fmt.Println(" fait voir",AllRoom1.rooms[indexAllroom])
		if AllRoom1.rooms[indexAllroom][NamePlayer] == "{admin: false, drawer: false, score : 0}" {
			// sinon ça ecrite deux fois
		} else {
			AllRoom1.rooms[indexAllroom][NamePlayer] = "{admin: false, drawer: false, score : 0}"
		}
		//fmt.Println("\n fait voir apres",AllRoom1.rooms[indexAllroom])
	}

	// augmente le score
	if strings.Contains(string(payload), "vieux_joueur") && salonExist == 1 {
		// alors cest un score
		//fmt.Println(string(payload))

		var indexAllroom int
		for i, item := range AllRoom1.rooms {
			if item[nameRoomForUsers] == nameRoomForUsers {
				indexAllroom = i
			}
		}
		byt := []byte(string(payload))
		var dat map[string]interface{}
		if err := json.Unmarshal(byt, &dat); err != nil {
			panic(err)
		}
		//fmt.Println(dat)

		vieuxJoueur := dat["vieux_joueur"].(string)
		nouveauScore := fmt.Sprintf("%v", dat["score"])

		//fmt.Println(" fait voir",AllRoom1.rooms[indexAllroom])
		//if AllRoom1.rooms[indexAllroom][vieuxJoueur] == "{admin: false, drawer: false, score : 0}" {
			// sinon ça ecrite deux fois
		//} else {
			byt2 := []byte(AllRoom1.rooms[indexAllroom][vieuxJoueur] )
			var dat2 map[string]interface{}
			if err := json.Unmarshal(byt2, &dat2); err != nil {
				panic(err)
			}
			vieuxScore := dat["score"].(string)
			vieuxScore+=nouveauScore
			fmt.Println("\n fait voir apres score : ",vieuxScore)
			AllRoom1.rooms[indexAllroom][vieuxJoueur] = "{admin: false, drawer: false, score : "+vieuxScore+" }"
		//}
		//fmt.Println("\n fait voir apres",AllRoom1.rooms[indexAllroom])
	}

	if strings.Contains(string(payload), "kind") {
		// alors cest un stroke
		//{"kind":4,"points":[{"x":187,"y":77}]}
		// _, found := Find(listStroke, string(payload))
		// if !found {
		// 	listStroke=append(listStroke,string(payload))
		// }

		//fmt.Println(string(payload))
		var indexAllroom int
		for i, item := range AllRoom1.rooms {
			if item[nameRoomForUsers] == nameRoomForUsers {
				indexAllroom = i
				if strings.Contains(AllRoom1.rooms[indexAllroom]["strokes"], string(payload)) {
					// pour eviter quil ecrit deux fois le nouveau message chat
				} else {
					AllRoom1.rooms[indexAllroom]["strokes"] = AllRoom1.rooms[indexAllroom]["strokes"] + string(payload) + ","
					// convertir string en byte puis envoyer a html
					//data := []byte(AllRoom1.rooms[indexAllroom]["strokes"])
					//c.ws.WriteMessage(mt,data )
				}

				//fmt.Println("\n apres chat ", AllRoom1.rooms[indexAllroom]["chats"])

			}

		}
		//fmt.Println(listStroke)
		/*if unefois==1{
			c.ws.WriteMessage(mt, listStroke)
			listStroke= nil
		}*/
		//c.ws.WriteMessage(mt, listStroke)
		//listStroke= nil

	}

	//futur technique pour envoyer les data du salon a chaque fois pour nimporte quel send 
	// sauf que timothee n a pas fini le front end pour sadapter a ça.
	// ça permettra aussi si un nouveau arrivant  arrive dans la salle il recoit les derniers mise a jour
	/*for i, item := range AllRoom1.rooms  {
		if ( item[nameRoomForUsers]==nameRoomForUsers){
			jsonStr, err := json.Marshal(AllRoom1.rooms[i])
			if err != nil {
				fmt.Println(err)
			}
			fmt.Println(string(jsonStr))
			data := []byte(jsonStr)
			return c.ws.WriteMessage(mt,data )

		}

	}*/

	return c.ws.WriteMessage(mt, payload)
}

// writePump pumps messages from the hub to the websocket connection.
func (s *subscription) writePump() {
	c := s.conn
	ticker := time.NewTicker(pingPeriod)
	defer func() {
		ticker.Stop()
		c.ws.Close()
	}()
	for {
		select {
		case message, ok := <-c.send:
			// message contient le message

			if !ok {
				c.write(websocket.CloseMessage, []byte{})
				return
			}
			if err := c.write(websocket.TextMessage, message); err != nil {
				return
			}
		case <-ticker.C:
			if err := c.write(websocket.PingMessage, []byte{}); err != nil {
				return
			}
		}
	}
}

// serveWs handles websocket requests from the peer.
func serveWs(w http.ResponseWriter, r *http.Request, roomId string) {
	fmt.Print("--------- servews ----------")
	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println(err.Error())
		return
	}

	c := &connection{send: make(chan []byte, 256), ws: ws}
	//fmt.Print(ws)
	s := subscription{c, roomId}

	h.register <- s
	go s.writePump()
	go s.readPump()
	// reader(ws)
}

// func wsEndpoint(w http.ResponseWriter, r *http.Request) {
//     upgrader.CheckOrigin = func(r *http.Request) bool { return true }
//
//     // upgrade this connection to a WebSocket
//     // connection
//     ws, err := upgrader.Upgrade(w, r, nil)
//     if err != nil {
//         log.Println(err)
//     }
//
//     log.Println("Client Connected")
//     err = ws.WriteMessage(1, []byte("Hi Client!"))
//     if err != nil {
//         log.Println(err)
//     }
//     // listen indefinitely for new messages coming
//     // through on our WebSocket connection
//     reader(ws)
// }
//
// func reader(conn *websocket.Conn) {
//     for {
//     // read in a message
//         messageType, p, err := conn.ReadMessage()
//         if err != nil {
//             log.Println(err)
//             return
//         }
//     // print out that message for clarity
//         fmt.Println(string(p))
//
//         if err := conn.WriteMessage(messageType, p); err != nil {
//             log.Println(err)
//             return
//         }
//
//     }
// }

var listeSalon []string
var listeUtilisateur []string

//var birdData map[string]interface{}
func envoieSalonDispo(w http.ResponseWriter, r *http.Request, nomRoom string, id string) {
	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println(err.Error())
		return
	}

	c := &connection{send: make(chan []byte, 256), ws: ws}
	log.Println(c)
	log.Println("envoieSalonDispo FONCTION!!!!!!!!!!!")
	log.Println(listeSalon)                         // tableau vide
	listeSalon = append(listeSalon, nomRoom+"-"+id) //Slice will become [1, 2, 3, 4]
	//log.Println(listeSalon)
	/*listeSalon=append(listeSalon, "{"+nomRoom + "-" + id+": "+`{"users": {
			"sam":{"dessinateur": true, "admin": false},
			"timothee":{"dessinateur": true, "admin": false},
			"david":{"dessinateur": false, "admin": true}
	},
	"dessin":[
			{"x: 215",
			"y: 450",
			"finish :false"
			}
			,
			{"x: 215",
			"y: 450",
			"finish :false"
			},
			{"x: 215",
			"y: 450",
			"finish :false"
			}
		]
	}`+"}")*/
}

func ajoutPseudo(w http.ResponseWriter, r *http.Request, nomRoom string, pseudo string) {
	fmt.Println("AJOUT PSEUDO OK")
	fmt.Printf("nomRoom:", nomRoom)
	fmt.Printf("pseudo:", pseudo)
	listeUtilisateur = append(listeUtilisateur, pseudo) //Slice will become [1, 2, 3, 4]
	fmt.Println("listing------------:")
	fmt.Println(listeUtilisateur)
}

// func ecouteSalonDispo(w http.ResponseWriter, r *http.Request)  {
// 	ws, err := upgrader.Upgrade(w, r, nil)
// 	if err != nil {
// 		log.Println(err.Error())
// 		return
// 	}
//
// 	c := &connection{send: make(chan []byte, 256), ws: ws}
// 	log.Println(c)
// 	log.Println("FONCTION ECOUTE SALON")
// 	// listeSalon = append(listeSalon, nomRoom) //Slice will become [1, 2, 3, 4]
// 	// listeUtilisateur = append(listeUtilisateur, id) //Slice will become [1, 2, 3, 4]
//
// }
